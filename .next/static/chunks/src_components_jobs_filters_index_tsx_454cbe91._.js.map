{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/ashanmu2/Desktop/Projects/job%20portal/choli/src/components/jobs/filters/index.tsx"],"sourcesContent":["\"use client\";\r\nimport { Company } from \"@/types/company\";\r\nimport { Options } from \"@/types/filter\";\r\nimport React, { useState } from \"react\";\r\nimport { ChevronDown, ChevronUp } from \"lucide-react\";\r\n\r\nexport default function MultiFilterDropDown({\r\n  options,\r\n  filterData,\r\n  categoryName,\r\n}: {\r\n  categoryName: string;\r\n  options: Options;\r\n  filterData: Company[] | string[];\r\n}) {\r\n  const { isObject, option } = options;\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  const toggleDropdown = () => setIsOpen((prev) => !prev);\r\n\r\n  return (\r\n    <div className=\"w-full max-w-md mx-auto relative\">\r\n      {/* Toggle Button */}\r\n      <button\r\n        onClick={toggleDropdown}\r\n        className=\"w-full flex items-center justify-between bg-gray-100 px-4 py-2 rounded-md shadow-sm text-left text-sm font-medium text-gray-700 hover:bg-gray-200 focus:outline-none\"\r\n      >\r\n        <span>{categoryName}</span>\r\n        {isOpen ? <ChevronUp size={16} /> : <ChevronDown size={16} />}\r\n      </button>\r\n\r\n      {/* Dropdown Menu */}\r\n      {isOpen && (\r\n        <div className=\"mt-2 p-4 bg-white border rounded-md shadow-md max-h-64 overflow-y-auto space-y-2 absolute z-10 w-full grid grid-cols-3 gap-4\">\r\n          {filterData?.map((item, index) => {\r\n            let optionLabel = \"\";\r\n            let optionValue = \"\";\r\n\r\n            if (isObject) {\r\n              optionLabel = (item as Record<string, any>)[\r\n                option?.label ?? \"name\"\r\n              ];\r\n              optionValue = (item as Record<string, any>)[\r\n                option?.value ?? \"id\"\r\n              ];\r\n            } else {\r\n              optionLabel = item as string;\r\n              optionValue = item as string;\r\n            }\r\n\r\n            // Use both `optionValue` and `index` for a unique key\r\n            const uniqueKey = `${optionValue}-${index}`;\r\n\r\n            return (\r\n              <label\r\n                key={uniqueKey} // Ensure unique key\r\n                className=\"flex items-center gap-2 cursor-pointer text-sm\"\r\n              >\r\n                <input\r\n                  type=\"checkbox\"\r\n                  value={optionValue}\r\n                  className=\"form-checkbox h-4 w-4 text-blue-600\"\r\n                />\r\n                <span className=\"truncate\">{optionLabel}</span>\r\n              </label>\r\n            );\r\n          })}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n"],"names":[],"mappings":";;;;AAGA;AACA;AAAA;;;AAJA;;;AAMe,SAAS,oBAAoB,EAC1C,OAAO,EACP,UAAU,EACV,YAAY,EAKb;;IACC,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,GAAG;IAC7B,MAAM,CAAC,QAAQ,UAAU,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAErC,MAAM,iBAAiB,IAAM,UAAU,CAAC,OAAS,CAAC;IAElD,qBACE,6LAAC;QAAI,WAAU;;0BAEb,6LAAC;gBACC,SAAS;gBACT,WAAU;;kCAEV,6LAAC;kCAAM;;;;;;oBACN,uBAAS,6LAAC,mNAAA,CAAA,YAAS;wBAAC,MAAM;;;;;6CAAS,6LAAC,uNAAA,CAAA,cAAW;wBAAC,MAAM;;;;;;;;;;;;YAIxD,wBACC,6LAAC;gBAAI,WAAU;0BACZ,YAAY,IAAI,CAAC,MAAM;oBACtB,IAAI,cAAc;oBAClB,IAAI,cAAc;oBAElB,IAAI,UAAU;wBACZ,cAAc,AAAC,IAA4B,CACzC,QAAQ,SAAS,OAClB;wBACD,cAAc,AAAC,IAA4B,CACzC,QAAQ,SAAS,KAClB;oBACH,OAAO;wBACL,cAAc;wBACd,cAAc;oBAChB;oBAEA,sDAAsD;oBACtD,MAAM,YAAY,GAAG,YAAY,CAAC,EAAE,OAAO;oBAE3C,qBACE,6LAAC;wBAEC,WAAU;;0CAEV,6LAAC;gCACC,MAAK;gCACL,OAAO;gCACP,WAAU;;;;;;0CAEZ,6LAAC;gCAAK,WAAU;0CAAY;;;;;;;uBARvB;;;;;gBAWX;;;;;;;;;;;;AAKV;GAjEwB;KAAA","debugId":null}}]
}