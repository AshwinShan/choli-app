{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/ashanmu2/Desktop/Projects/job%20portal/choli-app/src/app/api/jobs/route.ts"],"sourcesContent":["import { promises as fs } from \"fs\";\r\nimport { NextResponse } from \"next/server\";\r\n\r\nconst filePath = process.cwd() + \"/src/app/data/jobs.json\";\r\n\r\n// ✅ GET Endpoint - Fetch Jobs\r\nexport async function GET() {\r\n  try {\r\n    const data = await fs.readFile(filePath, \"utf-8\");\r\n    return NextResponse.json(JSON.parse(data));\r\n  } catch (error) {\r\n    console.error(\"Error reading jobs.json:\", error);\r\n    return NextResponse.json({ error: \"Failed to fetch jobs\" }, { status: 500 });\r\n  }\r\n}\r\n\r\n// ✅ POST Endpoint - Add Job\r\nexport async function POST(request: Request) {\r\n  try {\r\n    const newJob = await request.json();\r\n\r\n    console.log(\"Received new job:\", newJob); // Debugging log\r\n\r\n    // ✅ Ensure Correct Job Structure\r\n    const formattedJob = {\r\n      id: String(new Date().getTime()), // Unique ID based on timestamp\r\n      title: newJob.title,\r\n      company: {\r\n        id: String(new Date().getTime()), // Assign company ID dynamically\r\n        name: newJob.company,\r\n        logo: newJob.logo || \"https://upload.wikimedia.org/wikipedia/commons/2/2f/Google_2015_logo.svg\", // Default logo\r\n      },\r\n      location: newJob.location,\r\n      description: {\r\n        description: newJob.description,\r\n        aboutTheCompany: \"Company information will be updated soon.\",\r\n        aboutTheRole: \"Role details will be refined.\",\r\n        aboutTheTeam: \"Team description will be added.\",\r\n        responsibilities: newJob.responsibilities || [],\r\n        requirements: newJob.requirements || [],\r\n        benefits: newJob.benefits || [],\r\n        role: newJob.title,\r\n        industry: \"Technology\",\r\n        employmentType: newJob.employmentType,\r\n        education: newJob.education || [],\r\n      },\r\n      datePosted: new Date().toISOString(),\r\n      experience: newJob.experience || { min: 0, max: 0 },\r\n      salary: newJob.salary || { min: 0, max: 0 },\r\n      skills: newJob.skills || [],\r\n      postedBy: \"admin@example.com\",\r\n      createdAt: Date.now(),\r\n      updatedAt: Date.now(),\r\n      isActive: true,\r\n      isDeleted: false,\r\n    };\r\n\r\n    // ✅ Save to `jobs.json`\r\n    const data = await fs.readFile(filePath, \"utf-8\");\r\n    const jobs = JSON.parse(data);\r\n\r\n    jobs.push(formattedJob);\r\n    await fs.writeFile(filePath, JSON.stringify(jobs, null, 2), \"utf-8\");\r\n\r\n    console.log(\"Job added successfully!\");\r\n\r\n    return NextResponse.json({ message: \"Job added successfully!\" });\r\n  } catch (error) {\r\n    console.error(\"Error adding job:\", error);\r\n    return NextResponse.json({ error: \"Failed to add job\" }, { status: 500 });\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEA,MAAM,WAAW,QAAQ,GAAG,KAAK;AAG1B,eAAe;IACpB,IAAI;QACF,MAAM,OAAO,MAAM,6FAAA,CAAA,WAAE,CAAC,QAAQ,CAAC,UAAU;QACzC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,KAAK,KAAK,CAAC;IACtC,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,4BAA4B;QAC1C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAuB,GAAG;YAAE,QAAQ;QAAI;IAC5E;AACF;AAGO,eAAe,KAAK,OAAgB;IACzC,IAAI;QACF,MAAM,SAAS,MAAM,QAAQ,IAAI;QAEjC,QAAQ,GAAG,CAAC,qBAAqB,SAAS,gBAAgB;QAE1D,iCAAiC;QACjC,MAAM,eAAe;YACnB,IAAI,OAAO,IAAI,OAAO,OAAO;YAC7B,OAAO,OAAO,KAAK;YACnB,SAAS;gBACP,IAAI,OAAO,IAAI,OAAO,OAAO;gBAC7B,MAAM,OAAO,OAAO;gBACpB,MAAM,OAAO,IAAI,IAAI;YACvB;YACA,UAAU,OAAO,QAAQ;YACzB,aAAa;gBACX,aAAa,OAAO,WAAW;gBAC/B,iBAAiB;gBACjB,cAAc;gBACd,cAAc;gBACd,kBAAkB,OAAO,gBAAgB,IAAI,EAAE;gBAC/C,cAAc,OAAO,YAAY,IAAI,EAAE;gBACvC,UAAU,OAAO,QAAQ,IAAI,EAAE;gBAC/B,MAAM,OAAO,KAAK;gBAClB,UAAU;gBACV,gBAAgB,OAAO,cAAc;gBACrC,WAAW,OAAO,SAAS,IAAI,EAAE;YACnC;YACA,YAAY,IAAI,OAAO,WAAW;YAClC,YAAY,OAAO,UAAU,IAAI;gBAAE,KAAK;gBAAG,KAAK;YAAE;YAClD,QAAQ,OAAO,MAAM,IAAI;gBAAE,KAAK;gBAAG,KAAK;YAAE;YAC1C,QAAQ,OAAO,MAAM,IAAI,EAAE;YAC3B,UAAU;YACV,WAAW,KAAK,GAAG;YACnB,WAAW,KAAK,GAAG;YACnB,UAAU;YACV,WAAW;QACb;QAEA,wBAAwB;QACxB,MAAM,OAAO,MAAM,6FAAA,CAAA,WAAE,CAAC,QAAQ,CAAC,UAAU;QACzC,MAAM,OAAO,KAAK,KAAK,CAAC;QAExB,KAAK,IAAI,CAAC;QACV,MAAM,6FAAA,CAAA,WAAE,CAAC,SAAS,CAAC,UAAU,KAAK,SAAS,CAAC,MAAM,MAAM,IAAI;QAE5D,QAAQ,GAAG,CAAC;QAEZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAA0B;IAChE,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,qBAAqB;QACnC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAoB,GAAG;YAAE,QAAQ;QAAI;IACzE;AACF","debugId":null}}]
}